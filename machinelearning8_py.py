# -*- coding: utf-8 -*-
"""MachineLearning8.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OPeJOxGHZbfDjBYUJIGGlt-gPyyU96QQ
"""

import matplotlib.pyplot as plt #draw graph
import numpy as np #make array
from sklearn.model_selection import train_test_split #split array for train/test set
import pandas as pd #use file from url
from sklearn.preprocessing import StandardScaler #make scaled array for multi variables
from sklearn.linear_model import LogisticRegression #predict a value from linear equation with given input..
from sklearn.linear_model import SGDClassifier #stochastic gradient descent. epoch epoch epoch. train train train.

fish = pd.read_csv('https://bit.ly/fish_csv_data')
fish_input= fish[['Weight','Length','Diagonal','Height','Width']].to_numpy()
fish_target = fish[['Species']].to_numpy()

train_input, test_input, train_target, test_target = train_test_split(
    fish_input, fish_target, random_state = 42
)

ss = StandardScaler()
ss.fit(train_input)
train_scaled = ss.transform(train_input)
test_scaled = ss.transform(test_input)

sc = SGDClassifier(loss='log', max_iter=20, random_state=42) #max_iter = # of epoch (how many times repeat)

#get accuracy
sc.fit(train_scaled, train_target.ravel())
print(sc.score(train_scaled, train_target))
print(sc.score(test_scaled, test_target))

#train once more and get accuracy.
sc.partial_fit(train_scaled, train_target.ravel()) #to avoid DataConversionWarning, put .ravel()
print(sc.score(train_scaled, train_target)) 
print(sc.score(test_scaled, test_target))


#draw graph of scores for each epoch.
sc = SGDClassifier(loss='log', random_state=42)
train_score = []
test_score =[]

classes = np.unique(train_target)
ran = np.arange(0,300)
for _ in range(0, 300):
  sc.partial_fit(train_scaled, train_target.ravel(), classes = classes)
  train_score.append(sc.score(train_scaled, train_target))
  test_score.append(sc.score(test_scaled, test_target))

plt.plot(ran, train_score)
plt.plot(ran, test_score)
plt.show()

#use the best epoch value
sc = SGDClassifier(loss ='log', max_iter =100, tol=None, random_state=42)
sc.fit(train_scaled, train_target.ravel())
print(sc.score(train_scaled, train_target)) 
print(sc.score(test_scaled, test_target))