# -*- coding: utf-8 -*-
"""machineLearning16.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dQENZp6Oc8DvkdCUHwp3ZrUrlaKlNRUc
"""

from tensorflow import keras
from sklearn.model_selection import train_test_split

(train_input, train_target), (test_input, test_target) = keras.datasets.fashion_mnist.load_data() #returns pairs of train and test set.

train_scaled = train_input / 255.0 
train_scaled = train_scaled.reshape(-1, 28*28) #make a sample one array. Do it to all samples.

train_scaled, val_scaled, train_target, val_target = train_test_split(
    train_scaled, train_target, test_size=0.2, random_state=42) #split for verification set.


# dense1 = keras.layers.Dense(100, activation = 'sigmoid', input_shape=(28*28, ))
# dense2 = keras.layers.Dense(10, activation = 'softmax')

# model = keras.Sequential([dense1, dense2])

# model.summary()

# model = keras.Sequential([
#                     keras.layers.Dense(100, activation = 'sigmoid', input_shape=(28*28, )),
#                     keras.layers.Dense(10, activation = 'softmax')
# ], name='Fashion MNIST Model')

# model.summary()

model = keras.Sequential()
model.add(keras.layers.Dense(100, activation = 'sigmoid', input_shape=(28*28, )))
model.add( keras.layers.Dense(10, activation = 'softmax'))
model.summary()

model.compile(loss = 'sparse_categorical_crossentropy', metrics='accuracy')

model.fit(train_scaled, train_target, epochs = 5)
print('Sigmoid: ',model.evaluate(val_scaled, val_target))

(train_input, train_target), (val_scaled, val_target) = keras.datasets.fashion_mnist.load_data() #returns pairs of train and test set.

train_scaled = train_input / 255.0 
train_scaled, val_scaled, train_target, val_target = train_test_split(
    train_scaled, train_target, test_size=0.2, random_state=42) #split for verification set.


model = keras.Sequential()
model.add(keras.layers.Flatten(input_shape=(28,28))) #이 층을 만들어서 입력층을 1차원배열로 펴주는것을 여기서해준다.
model.add(keras.layers.Dense(100, activation = 'relu'))
model.add( keras.layers.Dense(10, activation = 'softmax'))
model.summary()

model.compile(loss = 'sparse_categorical_crossentropy', metrics='accuracy')

model.fit(train_scaled, train_target, epochs = 5)
print('Relu: ',model.evaluate(val_scaled, val_target))

#SGD 경사하강법

model = keras.Sequential()
model.add(keras.layers.Flatten(input_shape=(28,28))) #이 층을 만들어서 입력층을 1차원배열로 펴주는것을 여기서해준다.
model.add(keras.layers.Dense(100, activation = 'sigmoid'))
model.add( keras.layers.Dense(10, activation = 'softmax'))
model.summary()
sgd = keras.optimizers.SGD()

# model.compile(optimizer=sgd, loss = 'sparse_categorical_crossentropy', metrics='accuracy')

model.compile(optimizer='sgd', loss = 'sparse_categorical_crossentropy', metrics='accuracy')


model.fit(train_scaled, train_target, epochs = 5)
print('SGD: ',model.evaluate( val_scaled, val_target))

#ADAM

model = keras.Sequential()
model.add(keras.layers.Flatten(input_shape=(28,28))) #이 층을 만들어서 입력층을 1차원배열로 펴주는것을 여기서해준다.
model.add(keras.layers.Dense(100, activation = 'sigmoid'))
model.add( keras.layers.Dense(10, activation = 'softmax'))
model.summary()
sgd = keras.optimizers.SGD()

# model.compile(optimizer=sgd, loss = 'sparse_categorical_crossentropy', metrics='accuracy')

model.compile(optimizer='adam', loss = 'sparse_categorical_crossentropy', metrics='accuracy')


model.fit(train_scaled, train_target, epochs = 5)
print('ADAM',model.evaluate(val_scaled, val_target))