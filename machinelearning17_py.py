# -*- coding: utf-8 -*-
"""machineLearning17.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hebkGuTnElpegaaqhoh9St0v_4GsGoPE
"""

from tensorflow import keras
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import numpy as np


(train_input, train_target), (test_input, test_target) = keras.datasets.fashion_mnist.load_data() #returns pairs of train and test set.

train_scaled = train_input / 255.0 
train_scaled, val_scaled, train_target, val_target = train_test_split(
    train_scaled, train_target, test_size=0.2, random_state=42) #split for verification set.

def model_fn(a_layer=None):
  model = keras.Sequential()
  model.add(keras.layers.Flatten(input_shape = (28,28)))
  model.add(keras.layers.Dense(100, activation ='relu'))

  if a_layer:
    model.add(a_layer)
  model.add(keras.layers.Dense(10, activation='softmax'))
  return model

model = model_fn(a_layer= keras.layers.Dropout(0.3))
model.summary()

#model.compile(loss='sparse_categorical_crossentropy', metrics='accuracy')
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', 
              metrics='accuracy')

checkpoint_cb = keras.callbacks.ModelCheckpoint('best-model.h5')
early_stopping_cb = keras.callbacks.EarlyStopping(patience=2, restore_best_weights=True)
history = model.fit(train_scaled, train_target, epochs= 20 , 
                    verbose = 0, validation_data =(val_scaled, val_target), callbacks =[checkpoint_cb, early_stopping_cb])

print(history.history.keys())

print('stopping epoch', early_stopping_cb.stopped_epoch)

# print('loss', history.histor>>y['loss'])
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.xlabel('epoch')
plt.ylabel('loss')
plt.legend(['train, val'])
plt.show()

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.xlabel('epoch')
plt.ylabel('accuracy')
plt.legend(['train, val'])
plt.show()


# #save model and load
# model.save('model-whole.h5')
# model = keras.models.load_model('model-whole.h5')

# #save weight and load
# model.save_weights('model-weights.h5')

# model = model_fn(a_layer= keras.layers.Dropout(0.3))
# model.load_weights('model-weights.h5')

val_labels = np.argmax(model.predict(val_scaled), axis = -1)
# print('scaled',val_scaled )
# print('label', val_labels) label [8 8 7 ... 8 8 6]
# print('target',val_target) target [8 8 7 ... 8 8 1]
print(np.mean(val_labels == val_target))