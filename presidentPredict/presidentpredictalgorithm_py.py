# -*- coding: utf-8 -*-
"""presidentPredictAlgorithm.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12wwMlAh7LZeAF5cNy1eWO5VMiOADY0tk
"""

import matplotlib.pyplot as plt #draw graph
import numpy as np #make array
from sklearn.model_selection import train_test_split #split array for train/test set
from sklearn.linear_model import LinearRegression #predict a value from linear equation with given input..
from sklearn.preprocessing import PolynomialFeatures
from sklearn.preprocessing import StandardScaler

ysy_input = [1,2,3,4,5,6,7,8,9,10,11,12,13,14]
ysy_target = [39.6,44.2,37.4,33.5,28.1,25.1,32.9,37.2,37.8,40.7,39.9,42.0,42.4,42.3]

ljm_input = [1,2,3,4,5,6,7,8,9,10,11,12,13,14]
ljm_target = [29.6,64.6,30.8,37.9,37.0,38.0,34.6,37.5,33.6,36.8,34.1,35.7,34.1,36.6]

ytrain_input, ytest_input, ytrain_target, ytest_target = train_test_split(
    ysy_input, ysy_target, random_state = 20
)

ltrain_input, ltest_input, ltrain_target, ltest_target = train_test_split(
    ljm_input, ljm_target, random_state = 20
)

ytrain_input = np.array(ytrain_input).reshape(-1,1)
ytest_input = np.array(ytest_input).reshape(-1,1)

degree = 7
inputvalue = 15
poly = PolynomialFeatures(degree = degree, include_bias = False)
poly.fit(ytrain_input)

ytrain_poly = poly.transform(ytrain_input)
ytest_poly = poly.transform(ytest_input)

lr = LinearRegression()
lr.fit(ytrain_poly, ytrain_target)

input = np.array([inputvalue]).reshape(-1,1)
poly.fit(input)
input = poly.transform(input)

plt.plot([inputvalue], lr.predict(input), marker='^')
plt.scatter(ytrain_input, ytrain_target)
print("probability of ysy:", lr.predict(input),"where the accuracy is ", 100*lr.score(ytrain_poly, ytrain_target))
plt.show()

ltrain_input = np.array(ltrain_input).reshape(-1,1)
ltest_input = np.array(ltest_input).reshape(-1,1)

poly = PolynomialFeatures(degree = degree, include_bias = False)
poly.fit(ltrain_input)

ltrain_poly = poly.transform(ltrain_input)
ltest_poly = poly.transform(ltest_input)

lr = LinearRegression()
lr.fit(ltrain_poly, ltrain_target)

input = np.array([inputvalue]).reshape(-1,1)
poly.fit(input)
input = poly.transform(input)


plt.plot([inputvalue], lr.predict(input), marker='^')
plt.scatter(ltrain_input, ltrain_target)
print("probability of ljm:", lr.predict(input),"where the accuracy is ", 100*lr.score(ltrain_poly, ltrain_target))
plt.show()